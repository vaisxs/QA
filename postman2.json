"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw":	"{
  							  "age": 23,
    							  "salary": 1000,
    							  "name": "Svetik",
   							  "auth_token": "{{tokent}}"
    						}",

                                      "options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},

		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exect": [
							"// Статус код 200",
							"pm.test("Status code is 200", function () {"
							" pm.response.to.have.status(200);",
							"});",

							"// Провекра струтуры json в ответе.",
							"const schema = {"properties": {"alpha": {"type": "boolean"}}};",
							"pm.test("Schema is valid ", function() {",
							"pm.response.to.have.jsonSchema(schema);",
							"});",
							
							"//Проверка правильности коэффициентов перемножения",
							"pm.test("qa_salary_after_12_months", function () {",
   						        "var jsonData = pm.response.json();",
   						        "pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary * 2.9);",
							"});",

							"pm.test("qa_salary_after_6_months", function () {",
    							"var jsonData = pm.response.json();",
    							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary * 2);",
							"});,

							"pm.test("u_salary_1_5_year", function ()", 
    							"var jsonData = pm.response.json();",
    							"pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary * 4);",
							"});"
							
							"// Достать значение из поля u_salary_1_5_year\" и передать его в поле salary запроса http://162.55.220.72:5005/get_test_user",
							"var jsonData = pm.response.json();",
							"pm.environment.set('u_salary_1_5_year', jsonData.person.u_salary_1_5_year);",


							
						],
						"type": "text/javascript"
					}
				}
			],


"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "int"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "int"
						},
						{
							"key": "name",
							"value": "Nikita"
							"type": "text"
						},
						{
							"key": "auth_token"
							"values": {{token}}
						}

					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},  "response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exect": [
 								"//Статус код 200",
								"pm.test("Status code is 200", function () {",
   								"pm.response.to.have.status(200);",
								"});",

								"//Проверка структуры json",
								"const schema = {"properties": {"alpha": {"type": "boolean"}}};",
								"pm.test("Schema is valid ", function() {",
								"pm.response.to.have.jsonSchema(schema);",
								"});",
								
								"//Проверка коэффициентов перемножеия",
								"pm.test("1salary*", function () {",
							        " var jsonData = pm.response.json();",
  								"pm.expect(+jsonData.salary[1]).to.eql(jsonData.salary[0] * 2);",
								"});",


								"pm.test("2salary*", function () {",
   								"var jsonData = pm.response.json();",
  								"pm.expect(+jsonData.salary[2]).to.eql(jsonData.salary[0] * 3);",
								"});",
		
								"//проверить, что 2-й элемент массива salary больше 1-го и 0-го",
								"pm.test("salary3", function () {",
   								"var jsonData = pm.response.json();",
   								"pm.expect(+jsonData.salary[1])<(+jsonData.salary[2])>(jsonData.salary[0]);",
								"});",
						],
						"type": "text/javascript"
					}
				}
			], 


"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": {{token}},
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка статус кода 200",
							"pm.test("Status code is 200", function () {",
							"    pm.response.to.have.status(200);",
							"});",
						
							"// Проверка структуры json в ответе ",
							"const schema = {"properties": {"alpha": {"type": "boolean"}}};",

							"pm.test('Schema is valid', function() {",
							"  pm.response.to.have.jsonSchema(schema);",
							"});",
							
							"// Проверка правильности результата перемножения на коэффициент.",
							"let req = request.data;",
							"let weight = parseInt(req.weight)",
							
							"pm.test(\"daily_food\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012);",
							"});",

							"pm.test(\"daily_sleep\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]








